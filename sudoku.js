// ‚úÖ C·∫•u h√¨nh Firebase
const firebaseConfig = {
    apiKey: "AIzaSyBNiq4dkwxO9ZvzJB5YNg_rtgQsQ6KPVhE",
    authDomain: "sudoku-15e57.firebaseapp.com",
    projectId: "sudoku-15e57",
    storageBucket: "sudoku-15e57.appspot.com",
    messagingSenderId: "779507474162",
    appId: "1:779507474162:web:a27caae9cd9df8eefa7a6b",
    measurementId: "G-SFP9ESLNWB"
};

// üöÄ Kh·ªüi t·∫°o Firebase
firebase.initializeApp(firebaseConfig);
const db = firebase.firestore();

const boardSize = 9;
const board = [];
let startTime;
let difficulty = "medium";
let hints = 3;
let mistakes = 0;
const maxMistakes = 3;
let fullBoard = []; // üî• Khai b√°o to√†n c·ª•c
// ‚úÖ Ki·ªÉm tra k·∫øt n·ªëi Firebase
db.collection("test").add({
    message: "Hello from UMD!",
    timestamp: new Date()
})
    .then(() => console.log("‚úÖ Firebase UMD ho·∫°t ƒë·ªông!"))
    .catch((error) => console.error("‚ùå L·ªói k·∫øt n·ªëi:", error));

// üî• T·∫°o Sudoku h·ª£p l·ªá
function createValidSudokuBoard() {
    let board = Array.from({ length: boardSize }, () => Array(boardSize).fill(0));

    function isValid(board, row, col, num) {
        for (let i = 0; i < boardSize; i++) {
            if (board[row][i] === num || board[i][col] === num) return false;
            let boxRow = Math.floor(row / 3) * 3 + Math.floor(i / 3);
            let boxCol = Math.floor(col / 3) * 3 + (i % 3);
            if (board[boxRow][boxCol] === num) return false;
        }
        return true;
    }

    function solve(board) {
        for (let row = 0; row < boardSize; row++) {
            for (let col = 0; col < boardSize; col++) {
                if (board[row][col] === 0) {
                    let numbers = [...Array(9).keys()].map(n => n + 1).sort(() => Math.random() - 0.5);
                    for (let num of numbers) {
                        if (isValid(board, row, col, num)) {
                            board[row][col] = num;
                            if (solve(board)) return true;
                            board[row][col] = 0;
                        }
                    }
                    return false;
                }
            }
        }
        return true;
    }

    solve(board);
    return board;
}

// üé≤ Sinh b√†n Sudoku v√† hi·ªÉn th·ªã
function generateSudoku() {
    document.getElementById("sudoku-board").innerHTML = "";
    startTime = new Date();
    hints = 3;
    mistakes = 0;
    updateHints();
    updateMistakes();

    fullBoard = createValidSudokuBoard(); // üî• L∆∞u l·∫°i b·∫£ng ho√†n ch·ªânh
    let sudokuBoard = removeNumbers(fullBoard); // T·∫°o b·∫£n Sudoku hi·ªÉn th·ªã

    for (let i = 0; i < boardSize; i++) {
        board[i] = [];
        for (let j = 0; j < boardSize; j++) {
            const cell = document.createElement("input");
            cell.type = "text";
            cell.maxLength = 1;
            cell.dataset.row = i;
            cell.dataset.col = j;

            cell.addEventListener("input", handleInput);

            if (sudokuBoard[i][j] !== 0) {
                cell.value = sudokuBoard[i][j];
                cell.disabled = true;
            }

            document.getElementById("sudoku-board").appendChild(cell);
            board[i][j] = cell;
        }
    }
}
// üé≤ X√≥a s·ªë theo ƒë·ªô kh√≥ (Fix)
function removeNumbers(board) {
    const boardCopy = board.map(row => [...row]);
    let attempts = difficulty === "easy" ? 30 : difficulty === "medium" ? 40 : 50;
    let removed = 0;

    while (removed < attempts) {
        let row = Math.floor(Math.random() * boardSize);
        let col = Math.floor(Math.random() * boardSize);

        if (boardCopy[row][col] !== 0) {
            boardCopy[row][col] = 0;
            removed++;
        }
    }
    return boardCopy;
}

// ‚úÖ C·∫£i thi·ªán handleInput (Ki·ªÉm tra d·ªØ li·ªáu nh·∫≠p v√†o)
function handleInput(event) {
    const cell = event.target;
    const { row, col } = cell.dataset;
    const value = cell.value.replace(/[^1-9]/, ""); // Ch·ªâ ch·∫•p nh·∫≠n s·ªë 1-9
    cell.value = value;

    if (value === "") return; // B·ªè qua n·∫øu √¥ b·ªã x√≥a

    // Ki·ªÉm tra tr√πng l·∫∑p trong h√†ng, c·ªôt v√† √¥ 3x3
    let valid = true;
    for (let i = 0; i < boardSize; i++) {
        if ((board[row][i].value === value && i != col) || 
            (board[i][col].value === value && i != row)) {
            valid = false;
        }
    }

    const boxRowStart = Math.floor(row / 3) * 3;
    const boxColStart = Math.floor(col / 3) * 3;
    for (let r = boxRowStart; r < boxRowStart + 3; r++) {
        for (let c = boxColStart; c < boxColStart + 3; c++) {
            if (board[r][c].value === value && (r != row || c != col)) {
                valid = false;
            }
        }
    }

    // N·∫øu sai, tƒÉng s·ªë l·ªói v√† ƒë·ªïi m√†u √¥
    if (!valid) {
        cell.style.backgroundColor = "red";
        mistakes++;
        updateMistakes();

        if (mistakes >= maxMistakes) {
            alert("‚ùå B·∫°n ƒë√£ v∆∞·ª£t qu√° s·ªë l·ªói cho ph√©p. Tr√≤ ch∆°i k·∫øt th√∫c!");
            generateSudoku();
        }
    } else {
        cell.style.backgroundColor = "white";
    }

    // Ki·ªÉm tra n·∫øu b·∫£ng ƒë√£ ƒë·∫ßy ƒë·ªß
    if (isBoardFull()) {
        if (isBoardCorrect()) {
            let endTime = new Date();
            let completionTime = Math.round((endTime - startTime) / 1000);
            alert(`üéâ Ho√†n th√†nh trong ${completionTime} gi√¢y!`);

            const playerName = document.getElementById("player-name").value || "·∫®n danh";
            saveScore(playerName, completionTime);
            loadLeaderboard();
        } else {
            alert("‚ùå C√≥ l·ªói trong b·∫£ng. Ki·ªÉm tra l·∫°i!");
        }
    }
}

// Ki·ªÉm tra xem b·∫£ng ƒë√£ ƒë·∫ßy ƒë·ªß ch∆∞a
function isBoardFull() {
    for (let i = 0; i < boardSize; i++) {
        for (let j = 0; j < boardSize; j++) {
            if (board[i][j].value === "") return false;
        }
    }
    return true;
}

// Ki·ªÉm tra xem b·∫£ng c√≥ ƒë√∫ng kh√¥ng d·ª±a tr√™n fullBoard
function isBoardCorrect() {
    for (let i = 0; i < boardSize; i++) {
        for (let j = 0; j < boardSize; j++) {
            if (parseInt(board[i][j].value) !== fullBoard[i][j]) return false;
        }
    }
    return true;
}
function updateMistakes() {
    document.getElementById("mistakes").innerText = `‚ùå L·ªói sai: ${mistakes}/${maxMistakes}`;
}

// üèÜ L∆∞u ƒëi·ªÉm l√™n Firestore
function saveScore(playerName, timeTaken) {
    db.collection("scores").add({
        name: playerName,
        time: timeTaken,
        timestamp: firebase.firestore.FieldValue.serverTimestamp()
    })
    .then(() => console.log("‚úÖ ƒêi·ªÉm s·ªë ƒë√£ l∆∞u th√†nh c√¥ng!"))
    .catch(error => console.error("‚ùå L·ªói khi l∆∞u ƒëi·ªÉm:", error));
}

// üìä Hi·ªÉn th·ªã b·∫£ng x·∫øp h·∫°ng
function loadLeaderboard() {
    db.collection("scores").orderBy("time", "asc").limit(10).get()
    .then(querySnapshot => {
        let leaderboard = "";
        querySnapshot.forEach(doc => {
            const data = doc.data();
            leaderboard += `<li>${data.name} - ${data.time} gi√¢y</li>`;
        });
        document.getElementById("leaderboard").innerHTML = leaderboard;
    })
    .catch(error => console.error("‚ùå L·ªói khi t·∫£i b·∫£ng x·∫øp h·∫°ng:", error));
}

// ‚úÖ Ki·ªÉm tra k·∫øt qu·∫£ Sudoku
function checkSudoku() {
    let valid = true;
    for (let i = 0; i < boardSize; i++) {
        const rowSet = new Set();
        const colSet = new Set();
        for (let j = 0; j < boardSize; j++) {
            const rowValue = board[i][j].value;
            const colValue = board[j][i].value;
            if (rowValue && rowSet.has(rowValue)) valid = false;
            if (colValue && colSet.has(colValue)) valid = false;
            rowSet.add(rowValue);
            colSet.add(colValue);
        }
    }

    if (valid) {
        let endTime = new Date();
        let completionTime = Math.round((endTime - startTime) / 1000);
        alert(`üéâ Ho√†n th√†nh trong ${completionTime} gi√¢y`);

        const playerName = document.getElementById("player-name").value || "·∫®n danh";
        saveScore(playerName, completionTime);
        loadLeaderboard();
    } else {
        alert("‚ùå C√≥ l·ªói trong b·∫£ng, ki·ªÉm tra l·∫°i!");
    }
}
// üéØ H√†m G·ª£i √ù
function giveHint() {
    if (hints <= 0) {
        alert("‚ùå H·∫øt g·ª£i √Ω!");
        return;
    }

    if (!fullBoard || fullBoard.length === 0) {
        alert("‚ö†Ô∏è B·∫£ng Sudoku ch∆∞a ƒë∆∞·ª£c t·∫°o!");
        return;
    }

    // T√¨m √¥ tr·ªëng ƒë·∫ßu ti√™n ƒë·ªÉ ƒëi·ªÅn g·ª£i √Ω
    for (let row = 0; row < boardSize; row++) {
        for (let col = 0; col < boardSize; col++) {
            const cell = board[row][col];
            if (cell.value === "") {
                // ƒêi·ªÅn s·ªë t·ª´ fullBoard
                cell.value = fullBoard[row][col];
                cell.disabled = true; 
                cell.style.backgroundColor = "#d0ffd0"; // M√†u g·ª£i √Ω

                hints--;
                updateHints();

                // Ki·ªÉm tra n·∫øu ho√†n th√†nh sau g·ª£i √Ω
                if (isBoardFull() && isBoardCorrect()) {
                    let endTime = new Date();
                    let completionTime = Math.round((endTime - startTime) / 1000);
                    alert(`üéâ Ho√†n th√†nh trong ${completionTime} gi√¢y!`);
                    const playerName = document.getElementById("player-name").value || "·∫®n danh";
                    saveScore(playerName, completionTime);
                }

                return; // Ch·ªâ g·ª£i √Ω 1 √¥ m·ªói l·∫ßn
            }
        }
    }

    alert("‚úîÔ∏è Kh√¥ng c√≤n √¥ tr·ªëng n√†o ƒë·ªÉ g·ª£i √Ω!");
}


// ‚ö° C·∫≠p nh·∫≠t g·ª£i √Ω
function updateHints() {
    document.getElementById("hints").innerText = `üí° G·ª£i √Ω c√≤n: ${hints}`;
}
function changeDifficulty() {
    difficulty = document.getElementById("difficulty").value;
    generateSudoku(); // T·∫°o l·∫°i b√†n sau khi ƒë·ªïi ƒë·ªô kh√≥
}
// üî• T·∫£i tr√≤ ch∆°i v√† b·∫£ng x·∫øp h·∫°ng khi m·ªü trang
window.onload = function () {
    generateSudoku();
    loadLeaderboard();
};
